// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	order "challenge-yuno/internal/business/domain/order"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderRepository is an autogenerated mock type for the KVSOrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// AddOrder provides a mock function with given fields: _a0
func (_m *MockOrderRepository) AddOrder(_a0 order.Order) (*order.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(order.Order) (*order.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(order.Order) *order.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(order.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_AddOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrder'
type MockOrderRepository_AddOrder_Call struct {
	*mock.Call
}

// AddOrder is a helper method to define mock.On call
//   - _a0 order.Order
func (_e *MockOrderRepository_Expecter) AddOrder(_a0 interface{}) *MockOrderRepository_AddOrder_Call {
	return &MockOrderRepository_AddOrder_Call{Call: _e.mock.On("AddOrder", _a0)}
}

func (_c *MockOrderRepository_AddOrder_Call) Run(run func(_a0 order.Order)) *MockOrderRepository_AddOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(order.Order))
	})
	return _c
}

func (_c *MockOrderRepository_AddOrder_Call) Return(_a0 *order.Order, _a1 error) *MockOrderRepository_AddOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_AddOrder_Call) RunAndReturn(run func(order.Order) (*order.Order, error)) *MockOrderRepository_AddOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: orderID
func (_m *MockOrderRepository) GetOrder(orderID string) (*order.Order, error) {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*order.Order, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *order.Order); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderRepository_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - orderID string
func (_e *MockOrderRepository_Expecter) GetOrder(orderID interface{}) *MockOrderRepository_GetOrder_Call {
	return &MockOrderRepository_GetOrder_Call{Call: _e.mock.On("GetOrder", orderID)}
}

func (_c *MockOrderRepository_GetOrder_Call) Run(run func(orderID string)) *MockOrderRepository_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderRepository_GetOrder_Call) Return(_a0 *order.Order, _a1 error) *MockOrderRepository_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_GetOrder_Call) RunAndReturn(run func(string) (*order.Order, error)) *MockOrderRepository_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveOrders provides a mock function with given fields:
func (_m *MockOrderRepository) ListActiveOrders() ([]order.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListActiveOrders")
	}

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_ListActiveOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveOrders'
type MockOrderRepository_ListActiveOrders_Call struct {
	*mock.Call
}

// ListActiveOrders is a helper method to define mock.On call
func (_e *MockOrderRepository_Expecter) ListActiveOrders() *MockOrderRepository_ListActiveOrders_Call {
	return &MockOrderRepository_ListActiveOrders_Call{Call: _e.mock.On("ListActiveOrders")}
}

func (_c *MockOrderRepository_ListActiveOrders_Call) Run(run func()) *MockOrderRepository_ListActiveOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderRepository_ListActiveOrders_Call) Return(_a0 []order.Order, _a1 error) *MockOrderRepository_ListActiveOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_ListActiveOrders_Call) RunAndReturn(run func() ([]order.Order, error)) *MockOrderRepository_ListActiveOrders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function with given fields: orderID, status
func (_m *MockOrderRepository) UpdateOrderStatus(orderID string, status order.Status) (*order.Order, error) {
	ret := _m.Called(orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, order.Status) (*order.Order, error)); ok {
		return rf(orderID, status)
	}
	if rf, ok := ret.Get(0).(func(string, order.Status) *order.Order); ok {
		r0 = rf(orderID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, order.Status) error); ok {
		r1 = rf(orderID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockOrderRepository_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - orderID string
//   - status order.Status
func (_e *MockOrderRepository_Expecter) UpdateOrderStatus(orderID interface{}, status interface{}) *MockOrderRepository_UpdateOrderStatus_Call {
	return &MockOrderRepository_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", orderID, status)}
}

func (_c *MockOrderRepository_UpdateOrderStatus_Call) Run(run func(orderID string, status order.Status)) *MockOrderRepository_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(order.Status))
	})
	return _c
}

func (_c *MockOrderRepository_UpdateOrderStatus_Call) Return(_a0 *order.Order, _a1 error) *MockOrderRepository_UpdateOrderStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_UpdateOrderStatus_Call) RunAndReturn(run func(string, order.Status) (*order.Order, error)) *MockOrderRepository_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
