// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	order "challenge-yuno/internal/business/domain/order"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderUsecase is an autogenerated mock type for the OrderUsecase type
type MockOrderUsecase struct {
	mock.Mock
}

type MockOrderUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderUsecase) EXPECT() *MockOrderUsecase_Expecter {
	return &MockOrderUsecase_Expecter{mock: &_m.Mock}
}

// AddOrder provides a mock function with given fields: _a0
func (_m *MockOrderUsecase) AddOrder(_a0 order.Order) (*order.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(order.Order) (*order.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(order.Order) *order.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(order.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUsecase_AddOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrder'
type MockOrderUsecase_AddOrder_Call struct {
	*mock.Call
}

// AddOrder is a helper method to define mock.On call
//   - _a0 order.Order
func (_e *MockOrderUsecase_Expecter) AddOrder(_a0 interface{}) *MockOrderUsecase_AddOrder_Call {
	return &MockOrderUsecase_AddOrder_Call{Call: _e.mock.On("AddOrder", _a0)}
}

func (_c *MockOrderUsecase_AddOrder_Call) Run(run func(_a0 order.Order)) *MockOrderUsecase_AddOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(order.Order))
	})
	return _c
}

func (_c *MockOrderUsecase_AddOrder_Call) Return(_a0 *order.Order, _a1 error) *MockOrderUsecase_AddOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUsecase_AddOrder_Call) RunAndReturn(run func(order.Order) (*order.Order, error)) *MockOrderUsecase_AddOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrders provides a mock function with given fields:
func (_m *MockOrderUsecase) GetAllOrders() ([]order.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUsecase_GetAllOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrders'
type MockOrderUsecase_GetAllOrders_Call struct {
	*mock.Call
}

// GetAllOrders is a helper method to define mock.On call
func (_e *MockOrderUsecase_Expecter) GetAllOrders() *MockOrderUsecase_GetAllOrders_Call {
	return &MockOrderUsecase_GetAllOrders_Call{Call: _e.mock.On("GetAllOrders")}
}

func (_c *MockOrderUsecase_GetAllOrders_Call) Run(run func()) *MockOrderUsecase_GetAllOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderUsecase_GetAllOrders_Call) Return(_a0 []order.Order, _a1 error) *MockOrderUsecase_GetAllOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUsecase_GetAllOrders_Call) RunAndReturn(run func() ([]order.Order, error)) *MockOrderUsecase_GetAllOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: orderID
func (_m *MockOrderUsecase) GetOrder(orderID string) (*order.Order, error) {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*order.Order, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *order.Order); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUsecase_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderUsecase_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - orderID string
func (_e *MockOrderUsecase_Expecter) GetOrder(orderID interface{}) *MockOrderUsecase_GetOrder_Call {
	return &MockOrderUsecase_GetOrder_Call{Call: _e.mock.On("GetOrder", orderID)}
}

func (_c *MockOrderUsecase_GetOrder_Call) Run(run func(orderID string)) *MockOrderUsecase_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderUsecase_GetOrder_Call) Return(_a0 *order.Order, _a1 error) *MockOrderUsecase_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUsecase_GetOrder_Call) RunAndReturn(run func(string) (*order.Order, error)) *MockOrderUsecase_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveOrders provides a mock function with given fields:
func (_m *MockOrderUsecase) ListActiveOrders() ([]order.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListActiveOrders")
	}

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUsecase_ListActiveOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveOrders'
type MockOrderUsecase_ListActiveOrders_Call struct {
	*mock.Call
}

// ListActiveOrders is a helper method to define mock.On call
func (_e *MockOrderUsecase_Expecter) ListActiveOrders() *MockOrderUsecase_ListActiveOrders_Call {
	return &MockOrderUsecase_ListActiveOrders_Call{Call: _e.mock.On("ListActiveOrders")}
}

func (_c *MockOrderUsecase_ListActiveOrders_Call) Run(run func()) *MockOrderUsecase_ListActiveOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderUsecase_ListActiveOrders_Call) Return(_a0 []order.Order, _a1 error) *MockOrderUsecase_ListActiveOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUsecase_ListActiveOrders_Call) RunAndReturn(run func() ([]order.Order, error)) *MockOrderUsecase_ListActiveOrders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: orderID, status, priority
func (_m *MockOrderUsecase) UpdateOrder(orderID string, status order.Status, priority *int) (*order.Order, error) {
	ret := _m.Called(orderID, status, priority)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, order.Status, *int) (*order.Order, error)); ok {
		return rf(orderID, status, priority)
	}
	if rf, ok := ret.Get(0).(func(string, order.Status, *int) *order.Order); ok {
		r0 = rf(orderID, status, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, order.Status, *int) error); ok {
		r1 = rf(orderID, status, priority)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUsecase_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type MockOrderUsecase_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - orderID string
//   - status order.Status
//   - priority *int
func (_e *MockOrderUsecase_Expecter) UpdateOrder(orderID interface{}, status interface{}, priority interface{}) *MockOrderUsecase_UpdateOrder_Call {
	return &MockOrderUsecase_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", orderID, status, priority)}
}

func (_c *MockOrderUsecase_UpdateOrder_Call) Run(run func(orderID string, status order.Status, priority *int)) *MockOrderUsecase_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(order.Status), args[2].(*int))
	})
	return _c
}

func (_c *MockOrderUsecase_UpdateOrder_Call) Return(_a0 *order.Order, _a1 error) *MockOrderUsecase_UpdateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUsecase_UpdateOrder_Call) RunAndReturn(run func(string, order.Status, *int) (*order.Order, error)) *MockOrderUsecase_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderUsecase creates a new instance of MockOrderUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderUsecase {
	mock := &MockOrderUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
